h1 <- hist(obs, breaks=bins, freq=TRUE, plot=TRUE)
h2 <- hist(sim, breaks=bins, freq=TRUE, plot=TRUE) #False makes Density instead of frequency, try it
a=histc(obs, h1$breaks)
b=histc(sim, h1$breaks)
c=cbind(a$cnt, b$cnt)
d <- pmin(c[,1],c[,2])
overlap=sum(d)
histogram_match=overlap/sum(a$cnt)
gamma=histogram_match
# 4. Resulting SPAEF
spaef = 1- sqrt( (alpha-1)^2 + (beta-1)^2 + (gamma-1)^2 )
#print(paste0("SPAEF: ", round(spaef, digits = 6)))
# cat("SPAEF: ", spaef, "alpha: ", alpha, "beta: ", beta, "gamma: ", gamma)
return(c(spaef, alpha, beta, gamma))
}
#######
# Function 2 Test for two dataframes
spaef2 <- function(obs_df, sim_df, date_col) {
#### DATA PREPARATION
# Only use overlapping pixels
obs_df_sub <- subset(obs_df, (!is.na(obs_df[,date_col])) & (!is.na(sim_df[,date_col])))
sim_df_sub <- subset(sim_df, (!is.na(sim_df[,date_col])) & (!is.na(obs_df[,date_col])))
obs = obs_df_sub[,date_col]
sim = sim_df_sub[,date_col]
#### CALCULATION
# 1. Correlation Alpha
alpha=cor(obs, sim)
# 2. Coefficient of variation Beta/CV
cv_obs=sd(obs, na.rm = TRUE)/mean(obs, na.rm = TRUE);
cv_sim=sd(sim, na.rm = TRUE)/mean(sim, na.rm = TRUE);
beta=cv_sim/cv_obs;
# 3. HISTOmatch Gamma
obs=(obs-mean(obs, na.rm = TRUE))/sd(obs, na.rm = TRUE)
sim=(sim-mean(sim, na.rm = TRUE))/sd(sim, na.rm = TRUE)
bins=floor(sqrt(length(obs)))
h1 <- hist(obs, breaks=bins, freq=TRUE, plot=TRUE)
h2 <- hist(sim, breaks=bins, freq=TRUE, plot=TRUE) #False makes Density instead of frequency, try it
a=histc(obs, h1$breaks)
b=histc(sim, h1$breaks)
c=cbind(a$cnt, b$cnt)
d <- pmin(c[,1],c[,2])
overlap=sum(d)
histogram_match=overlap/sum(a$cnt)
gamma=histogram_match
# 4. Resulting SPAEF
spaef = 1- sqrt( (alpha-1)^2 + (beta-1)^2 + (gamma-1)^2 )
#print(paste0("SPAEF: ", round(spaef, digits = 6)))
# cat("SPAEF: ", spaef, "alpha: ", alpha, "beta: ", beta, "gamma: ", gamma)
return(c(spaef, alpha, beta, gamma))
}
df <- data.frame(Date = as.Date(character(0)),
SPAEF = numeric(0),
alpha = numeric(0),
beta = numeric(0),
gamma = numeric(0))
# Assign date_list to the Date column
df$Date <- as.Date(date_list)
df <- data.frame(Date = as.Date(character(10)),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Assign date_list to the Date column
df$Date <- as.Date(date_list)
df
spaef1 <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
spaef1
spaef_df <- function(name) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:10) {
obs_df <- SSEB_ts
sim <- SEBAL_ts
data_col <- i + 3
spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- spaef
df[i,]$alpha <- alpha
df[i,]$beta <- beta
df[i,]$gamma <- gamma
}
name <- df
return(name)
}
spaef_df <- function(name, obs_df, sim_df, date_col) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:10) {
data_col <- i + 3
spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- spaef
df[i,]$alpha <- alpha
df[i,]$beta <- beta
df[i,]$gamma <- gamma
}
name <- df
return(name)
}
spaef_df("SEBAL-SSEB", SEBAL_ts, SSEB_ts)
spaef_df <- function(name, obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:10) {
data_col <- i + 3
spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- spaef
df[i,]$alpha <- alpha
df[i,]$beta <- beta
df[i,]$gamma <- gamma
}
name <- df
return(name)
}
spaef_df("SEBAL-SSEB", SEBAL_ts, SSEB_ts)
obs_df <- SEBAL_ts
sim_df <- SSEB_ts
date_col <- 4
spaef2(obs_df, sim_df, date_col)
spaef
#######
# Function 2 Test for two dataframes
spaef2 <- function(obs_df, sim_df, date_col) {
#### DATA PREPARATION
# Only use overlapping pixels
obs_df_sub <- subset(obs_df, (!is.na(obs_df[,date_col])) & (!is.na(sim_df[,date_col])))
sim_df_sub <- subset(sim_df, (!is.na(sim_df[,date_col])) & (!is.na(obs_df[,date_col])))
obs = obs_df_sub[,date_col]
sim = sim_df_sub[,date_col]
#### CALCULATION
# 1. Correlation Alpha
alpha=cor(obs, sim)
# 2. Coefficient of variation Beta/CV
cv_obs=sd(obs, na.rm = TRUE)/mean(obs, na.rm = TRUE);
cv_sim=sd(sim, na.rm = TRUE)/mean(sim, na.rm = TRUE);
beta=cv_sim/cv_obs;
# 3. HISTOmatch Gamma
obs=(obs-mean(obs, na.rm = TRUE))/sd(obs, na.rm = TRUE)
sim=(sim-mean(sim, na.rm = TRUE))/sd(sim, na.rm = TRUE)
bins=floor(sqrt(length(obs)))
h1 <- hist(obs, breaks=bins, freq=TRUE, plot=TRUE)
h2 <- hist(sim, breaks=bins, freq=TRUE, plot=TRUE) #False makes Density instead of frequency, try it
a=histc(obs, h1$breaks)
b=histc(sim, h1$breaks)
c=cbind(a$cnt, b$cnt)
d <- pmin(c[,1],c[,2])
overlap=sum(d)
histogram_match=overlap/sum(a$cnt)
gamma=histogram_match
# 4. Resulting SPAEF
spaef = 1- sqrt( (alpha-1)^2 + (beta-1)^2 + (gamma-1)^2 )
#print(paste0("SPAEF: ", round(spaef, digits = 6)))
# cat("SPAEF: ", spaef, "alpha: ", alpha, "beta: ", beta, "gamma: ", gamma)
result <- c(spaef, alpha, beta, gamma)
return(result)
}
result <- spaef2(obs_df, sim_df, date_col)
result
result[1]
spaef_df <- function(name, obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:10) {
data_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
name <- df
return(name)
}
spaef_df <- function(name, obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:10) {
data_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
name <- df
return(name)
return(df)
}
df <- spaef_df("SEBAL-SSEB", SEBAL_ts, SSEB_ts)
df
for (i in 1:3) {
obs_df <- SSEB_ts
sim <- SEBAL_ts
data_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
print(result)
}
head(SSEB_ts)
obs_df <- SEBAL_ts
sim_df <- SSEB_ts
date_col <- 4
result <- spaef2(obs_df, sim_df, date_col)
result
for (i in 1:3) {
obs_df <- SSEB_ts
sim_df <- SEBAL_ts
data_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
print(result)
}
obs_df <- SEBAL_ts
sim_df <- SSEB_ts
date_col <- 4
result <- spaef2(obs_df, sim_df, date_col)
result
obs_df <- SEBAL_ts
sim_df <- SSEB_ts
date_col <- 5
result <- spaef2(obs_df, sim_df, date_col)
result
for (i in 1:3) {
obs_df <- SEBAL_ts
sim_df <- SSEB_ts
date_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
print(result)
}
#######
# Function 2 Test for two dataframes
spaef2 <- function(obs_df, sim_df, date_col) {
#### DATA PREPARATION
# Only use overlapping pixels
obs_df_sub <- subset(obs_df, (!is.na(obs_df[,date_col])) & (!is.na(sim_df[,date_col])))
sim_df_sub <- subset(sim_df, (!is.na(sim_df[,date_col])) & (!is.na(obs_df[,date_col])))
obs = obs_df_sub[,date_col]
sim = sim_df_sub[,date_col]
#### CALCULATION
# 1. Correlation Alpha
alpha=cor(obs, sim)
# 2. Coefficient of variation Beta/CV
cv_obs=sd(obs, na.rm = TRUE)/mean(obs, na.rm = TRUE);
cv_sim=sd(sim, na.rm = TRUE)/mean(sim, na.rm = TRUE);
beta=cv_sim/cv_obs;
# 3. HISTOmatch Gamma
obs=(obs-mean(obs, na.rm = TRUE))/sd(obs, na.rm = TRUE)
sim=(sim-mean(sim, na.rm = TRUE))/sd(sim, na.rm = TRUE)
bins=floor(sqrt(length(obs)))
h1 <- hist(obs, breaks=bins, freq=TRUE, plot=TRUE)
h2 <- hist(sim, breaks=bins, freq=TRUE, plot=TRUE) #False makes Density instead of frequency, try it
a=histc(obs, h1$breaks)
b=histc(sim, h1$breaks)
c=cbind(a$cnt, b$cnt)
d <- pmin(c[,1],c[,2])
overlap=sum(d)
histogram_match=overlap/sum(a$cnt)
gamma=histogram_match
# 4. Resulting SPAEF
spaef = 1- sqrt( (alpha-1)^2 + (beta-1)^2 + (gamma-1)^2 )
#print(paste0("SPAEF: ", round(spaef, digits = 6)))
# cat("SPAEF: ", spaef, "alpha: ", alpha, "beta: ", beta, "gamma: ", gamma)
result <- c(spaef, alpha, beta, gamma)
return(result)
}
spaef_df <- function(name, obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:10) {
date_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
name <- df
return(name)
return(df)
}
spaef_df <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:10) {
date_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
return(df)
}
df <- spaef_df(SEBAL_ts, SSEB_ts)
df
df <- spaef_df(SEBAL_ts, METRIC_ts)
df
df <- spaef_df(SEBAL_ts, WASIM_ts)
df
date_list_SSEB = c("2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-09-19")
spaef_df_SSEB <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list_SSEB),
SPAEF = numeric(9),
alpha = numeric(9),
beta = numeric(9),
gamma = numeric(9))
# Run SPAEF
for (i in 1:9) {
date_col <- i + 3
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
return(df)
}
df <- spaef_df(SEBAL_ts, SSEB_ts)
head(SSEB_ts)
spaef2(SEBAL_ts, SSEB_ts, 4)
df <- spaef_df_SSEB(SEBAL_ts, SSEB_ts)
spaef2(SEBAL_ts, SSEB_ts, 5)
spaef2(SEBAL_ts, SSEB_ts, 6)
spaef_df_SSEB <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(9),
alpha = numeric(9),
beta = numeric(9),
gamma = numeric(9))
# Run SPAEF
for (i in 1:9) {
if (i < 8) {
date_col <- i + 3
}
else {
date_col <- i+4
}
}
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
spaef_df_SSEB <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(9),
alpha = numeric(9),
beta = numeric(9),
gamma = numeric(9))
# Run SPAEF
for (i in 1:9) {
if (i < 8) {
date_col <- i + 3
}
else {
date_col <- i+4
}
}
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
df <- spaef_df_SSEB(SEBAL_ts, SSEB_ts)
spaef_df_SSEB <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:9) {
if (i < 8) {
date_col <- i + 3
}
else {
date_col <- i+4
}
}
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
df <- spaef_df_SSEB(SEBAL_ts, SSEB_ts)
df
spaef_df_SSEB <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:9) {
if (i < 8) {
date_col <- i + 3
}
else {
date_col <- i+4
}
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
return(df)
}
spaef_df_SSEB <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:9) {
if (i <= 8) {
date_col <- i + 3
}
else {
date_col <- i+4
}
result <- spaef2(obs_df, sim_df, date_col)
df[i,]$SPAEF <- result[1]
df[i,]$alpha <- result[2]
df[i,]$beta <- result[3]
df[i,]$gamma <- result[4]
}
return(df)
}
df <- spaef_df_SSEB(SEBAL_ts, SSEB_ts)
df
spaef_df_SSEB <- function(obs_df, sim_df) {
# Create emtpy df
df <- data.frame(Date = as.Date(date_list),
SPAEF = numeric(10),
alpha = numeric(10),
beta = numeric(10),
gamma = numeric(10))
# Run SPAEF
for (i in 1:9) {
if (i <= 8) {
date_col <- i + 3
}
else {
date_col <- i+4
}
result <- spaef2(obs_df, sim_df, date_col)
df[date_col-3,]$SPAEF <- result[1]
df[date_col-3,]$alpha <- result[2]
df[date_col-3,]$beta <- result[3]
df[date_col-3,]$gamma <- result[4]
}
return(df)
}
df <- spaef_df_SSEB(SEBAL_ts, SSEB_ts)
df
head(SSEB_ts)
spaef2(SEBAL_ts, SSEB_ts, 12)
spaef2(SEBAL_ts, SSEB_ts, 13)
