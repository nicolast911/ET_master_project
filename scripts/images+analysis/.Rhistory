"METRIC_WASIM")))) %>%
ggplot(aes(x = Date, y = Models, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2), color = abs(value) > 0.4)) +
scale_color_manual(guide = FALSE, values = c("black", "white")) +
scale_fill_scico(palette = "vik", midpoint = 0, direction = -1) +
labs(title = "SPAEF per Date and Model pair",
x = "Date",
y = "Model pair",
fill = "SPAEF") +
theme_bw() +
theme(axis.title.x = element_text(size = 12.5),  # Adjust the size of x-axis title
axis.title.y = element_text(size = 12.5),
plot.title = element_text(size = 14.5),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12.5)) # Adjust the size of y-axis title
spaef_heatmap
path_spaef_plots = paste(path_data, "Processed/export/R_plots/SPAEF", sep = "")
ggsave(spaef_heatmap, filename = paste(path_spaef_plots, "/spaef_heatmap.png", sep = ""),
width = 3300, height = 1942, units = "px")
ggsave(spaef_heatmap, filename = paste(path_spaef_plots, "/spaef_heatmap.png", sep = ""),
width = 3400, height = 1942, units = "px")
path_data = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/" # Path data NICOLAS-PC
path_spaef <- paste(path_data, "Processed/export/R_tables/SPAEF/", sep = "")
# Load each CSV file
SEBAL_SSEB <- read.csv(file.path(path_spaef, "SEBAL_SSEB.csv"),)
SEBAL_METRIC <- read.csv(file.path(path_spaef, "SEBAL_METRIC.csv"))
SEBAL_WASIM <- read.csv(file.path(path_spaef, "SEBAL_WASIM.csv"))
SSEB_METRIC <- read.csv(file.path(path_spaef, "SSEB_METRIC.csv"))
SSEB_WASIM <- read.csv(file.path(path_spaef, "SSEB_WASIM.csv"))
METRIC_WASIM <- read.csv(file.path(path_spaef, "METRIC_WASIM.csv"))
########################################
########################################
### Create SPAEF Plots
spaef_list <- list(SEBAL_SSEB,
SEBAL_METRIC,
SEBAL_WASIM,
SSEB_METRIC,
SSEB_WASIM,
METRIC_WASIM)
spaef_pivot <- pivot_longer(spaef_list[[1]], cols = 2:5)
library(tidyverse)
library(raster)
library(lubridate)
library(viridis)
library(sf)
library(scico)
library(gridExtra)
# for SPAEF
library(pracma)
date_list = c("2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-03-27",
"2020-09-19")
path_data = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/" # Path data NICOLAS-PC
path_spaef <- paste(path_data, "Processed/export/R_tables/SPAEF/", sep = "")
# Load each CSV file
SEBAL_SSEB <- read.csv(file.path(path_spaef, "SEBAL_SSEB.csv"),)
SEBAL_METRIC <- read.csv(file.path(path_spaef, "SEBAL_METRIC.csv"))
SEBAL_WASIM <- read.csv(file.path(path_spaef, "SEBAL_WASIM.csv"))
SSEB_METRIC <- read.csv(file.path(path_spaef, "SSEB_METRIC.csv"))
SSEB_WASIM <- read.csv(file.path(path_spaef, "SSEB_WASIM.csv"))
METRIC_WASIM <- read.csv(file.path(path_spaef, "METRIC_WASIM.csv"))
########################################
########################################
### Create SPAEF Plots
spaef_list <- list(SEBAL_SSEB,
SEBAL_METRIC,
SEBAL_WASIM,
SSEB_METRIC,
SSEB_WASIM,
METRIC_WASIM)
spaef_pivot <- pivot_longer(spaef_list[[1]], cols = 2:5)
for (i in 2:6) {
spaef_pivot <- rbind(spaef_pivot, pivot_longer(spaef_list[[i]], cols = 2:5))
}
# Turn Date into factor
spaef_pivot$Date <- factor(spaef_pivot$Date)
spaef_pivot$name <- factor(spaef_pivot$name)
spaef_pivot$Models <- factor(spaef_pivot$Models,
levels = c("SEBAL_SSEB",
"SEBAL_METRIC",
"SEBAL_WASIM",
"SSEB_METRIC",
"SSEB_WASIM",
"METRIC_WASIM"))
# Turn values from 2020-03 with SSEB to NA
spaef_pivot <- spaef_pivot %>%
mutate(value = if_else((Models %in% c("SEBAL_SSEB", "SSEB_METRIC", "SSEB_WASIM") & Date %in% "2020-03-27"),NA,value))
spaef_pivot %>%
filter(Models %in% c("SEBAL_SSEB", "SSEB_METRIC", "SSEB_WASIM") & Date %in% "2020-03-27")
## Create Average column
spaef_mean <- spaef_pivot %>%
filter(name %in% "SPAEF") %>%
group_by(Models) %>%
dplyr::summarize(SPAEF = mean(value, na.rm = TRUE), Date = "Mean") %>%
pivot_longer(col = 2)
spaef_pivot_mean <- rbind(spaef_pivot, spaef_mean)
spaef_pivot <- spaef_pivot_mean
library(plotly)
spaef_wider <- pivot_wider(spaef_pivot)
spaef_wider
fig <- spaef_wider %>%
filter(!(Date %in% "Mean")) %>%
filter(!(Models %in% c("SEBAL_SSEB", "SSEB_METRIC", "SSEB_WASIM") & Date %in% "2020-03-27")) %>%
plot_ly(x = ~alpha, y = ~beta, z = ~gamma,
marker = list(color = ~SPAEF, showscale = TRUE, colorscale="vik",
reversescale = TRUE),
hoverinfo = "text",
hovertext = ~paste0("alpha: ", round(alpha, 2),
"\nbeta: ", round(beta, 2),
"\ngamma: ", round(gamma, 2))) %>%
layout(scene = list(xaxis = list(title = 'Correlation (alpha)'),
yaxis = list(title = "CV (beta)"),
zaxis = list(title = "Histo Match (gamma)")),
annotations = list(x = 1.06,
y = 1.02,
text = 'SPAEF',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
fig
fig <- spaef_wider %>%
filter(!(Date %in% "Mean")) %>%
filter(!(Models %in% c("SEBAL_SSEB", "SSEB_METRIC", "SSEB_WASIM") & Date %in% "2020-03-27")) %>%
plot_ly(x = ~alpha, y = ~beta, z = ~gamma,
marker = list(color = ~SPAEF, showscale = TRUE, colorscale="vik",
reversescale = TRUE),
hoverinfo = "text",
hovertext = ~paste0("alpha: ", round(alpha, 2),
"\nbeta: ", round(beta, 2),
"\ngamma: ", round(gamma, 2))) %>%
add_paths(x = ~alpha, y = ~beta, z = ~gamma) %>%
layout(scene = list(xaxis = list(title = 'Correlation (alpha)'),
yaxis = list(title = "CV (beta)"),
zaxis = list(title = "Histo Match (gamma)")),
annotations = list(x = 1.06,
y = 1.02,
text = 'SPAEF',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
fig
spaef_wide$id <- seq_len(nrow(spaef_wider))
spaef_wider$id <- seq_len(nrow(spaef_wider))
ms <- replicate(2, spaef_wider, simplify = F)
ms[[2]]$gamma <- 0
m <- ms %>%
bind_rows() %>%
group2NA("id", "vs")
fig <- spaef_wider %>%
filter(!(Date %in% "Mean")) %>%
filter(!(Models %in% c("SEBAL_SSEB", "SSEB_METRIC", "SSEB_WASIM") & Date %in% "2020-03-27")) %>%
plot_ly(x = ~alpha, y = ~beta, z = ~gamma,
marker = list(color = ~SPAEF, showscale = TRUE, colorscale="vik",
reversescale = TRUE),
hoverinfo = "text",
hovertext = ~paste0("alpha: ", round(alpha, 2),
"\nbeta: ", round(beta, 2),
"\ngamma: ", round(gamma, 2))) %>%
add_paths(data = m, x = ~alpha, y = ~beta, z = ~gamma) %>%
layout(scene = list(xaxis = list(title = 'Correlation (alpha)'),
yaxis = list(title = "CV (beta)"),
zaxis = list(title = "Histo Match (gamma)")),
annotations = list(x = 1.06,
y = 1.02,
text = 'SPAEF',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
fig
library(tidyverse)
library(raster)
library(rgdal)
library(lubridate)
library(viridis)
library(sf)
library(scico)
library(gridExtra)
# Load LandUse Map
LU_path = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster.tif"
LU = raster(LU_path)
# LandUse Classes
LU_agri = c(211, 212, 221, 222, 223, 241, 242, 243, 244)
LU_bare = c(331, 332, 333, 334, 131)
LU_grass = c(231, 321, 322, 323, 324, 411, 412)
LU_urban = c(111, 112, 121, 122, 123, 124, 132, 133, 141, 142)
LU_forest = c(311, 312, 313)
LU_water = c(511, 512, 335)
LU_copy = LU
# Replace Values
# AGRI = 1
for (i in LU_agri){
LU_copy[LU_copy == i] <- 1
}
# BARE = 2
for (i in LU_bare){
LU_copy[LU_copy == i] <- 2
}
# GRASS = 3
for (i in LU_grass){
LU_copy[LU_copy == i] <- 3
}
# URBAN = 4
for (i in LU_urban){
LU_copy[LU_copy == i] <- 4
}
# FOREST = 5
for (i in LU_forest){
LU_copy[LU_copy == i] <- 5
}
# WATER = 6
for (i in LU_water){
LU_copy[LU_copy == i] <- 6
}
plot(LU_copy)
hist(LU_copy)
# Export as Tiff
path_LU_export_tif = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster_combined.tif"
writeRaster(LU_copy, file = path_LU_export_tif, format="GTiff", overwrite = TRUE)
# Export as csv Dataframe
LU_df <- as.data.frame(LU_copy, xy = TRUE)
names(LU_df)[3] <- "values"
LU_df
LU_df <- LU_df %>%
mutate(LandUse_name = case_when(
LandUse == 1 ~ string_vector[1],
LandUse == 2 ~ string_vector[2],
LandUse == 3 ~ string_vector[3],
LandUse == 4 ~ string_vector[4],
LandUse == 5 ~ string_vector[5]
))
#################
#################
# PLOT
## Add Strings of Land use Class
string_vector <- c("Agriculture", "Bare Soil", "Grassland", "Urban Area", "Forest")
LU_df <- LU_df %>%
mutate(LandUse_name = case_when(
LandUse == 1 ~ string_vector[1],
LandUse == 2 ~ string_vector[2],
LandUse == 3 ~ string_vector[3],
LandUse == 4 ~ string_vector[4],
LandUse == 5 ~ string_vector[5]
))
LU_df
LU_df <- LU_df %>%
mutate(LandUse_name = case_when(
values == 1 ~ string_vector[1],
values == 2 ~ string_vector[2],
values == 3 ~ string_vector[3],
values == 4 ~ string_vector[4],
values == 5 ~ string_vector[5]
))
LU_df
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values) +
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values)) +
geom_raster() +  # Inverse color fill gradient
theme_bw() +
coord_equal() +
labs(title = paste("METRIC", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values)) +
geom_raster() +  # Inverse color fill gradient
theme_bw() +
coord_equal() +
labs(title = paste("METRIC"),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values)) +
geom_raster() +
scale_fill_viridis(option="turbo", na.value = "transparent", direction = -1, limits = c(0, max_val)) +  # Inverse color fill gradient
theme_bw() +
coord_equal() +
labs(title = paste("METRIC"),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values)) +
geom_raster() +
scale_fill_viridis(option="turbo", na.value = "transparent") +  # Inverse color fill gradient
theme_bw() +
coord_equal() +
labs(title = paste("METRIC"),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(METRIC_raster, filename = paste(path_plots, "/METRIC_raster.png"),
width = 2.94, height = 5.19, units = "in")
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_color_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("METRIC"),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
# Define custom colors for LandUse_name factors
#land_use_colors <- c("Agriculture" =  "#F0E442", "Bare Soil" = "#616161", "Grassland" = "lightgreen", "Urban Area" ="#DC697D", "Forest" =  "#337538")
# Viridis Adaption
land_use_colors <- c("Agriculture" =  "#FDE725FF", "Bare Soil" = "#616161", "Grassland" = "#7AD151FF", "Urban Area" ="#DC697D", "Forest" =  "#337538")
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_color_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("METRIC"),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = values)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("METRIC"),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster
## Plot
land_use_colors <- c("Agriculture" =  "#FDE725FF", "Bare Soil" = "#616161", "Grassland" = "#7AD151FF", "Urban Area" ="#DC697D", "Forest" =  "#337538")
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = LandUse_name)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("METRIC"),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = LandUse_name)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("Land Use"),
fill = "Land Use Class") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = LandUse_name)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("CORINE Land Cover"),
fill = "Land Use Class") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster
#################
#################
# PLOT
## Add Strings of Land use Class
string_vector <- c("Agriculture", "Bare Soil", "Grassland", "Urban Area", "Forest")
LU_df$LandUse_name <- factor(LU_df$LandUse_name,
levels = c("Agriculture", "Bare Soil", "Grassland", "Urban Area", "Forest"))
## Plot
land_use_colors <- c("Agriculture" =  "#FDE725FF", "Bare Soil" = "#616161", "Grassland" = "#7AD151FF", "Urban Area" ="#DC697D", "Forest" =  "#337538")
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = LandUse_name)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("CORINE Land Cover"),
fill = "Land Use Class") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
LU_raster
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = LandUse_name)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("CORINE Land Cover"),
fill = "Land Use Class") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2),
legend.text = element_text(size = 12))  # Remove axis Label
LU_raster
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = LandUse_name)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("CORINE Land Cover"),
fill = "Land Use Class") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2),
legend.text = element_text(size = 10))  # Remove axis Label
LU_raster
LU = raster(LU_path)
LU_raster <- ggplot(LU_df, aes(x = x, y = y, fill = LandUse_name)) +
geom_raster() +
theme_bw() +
coord_equal() +
scale_fill_manual(values = land_use_colors, na.value = "transparent") +
labs(title = paste("CORINE Land Cover"),
fill = "Land Use Class") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2),
legend.text = element_text(size = 10))  # Remove axis Label
LU_raster
ggsave(LU_df, filename = paste(path_plots, "/LU_raster.png"),
width = 2.94, height = 5.19, units = "in")
path_plots = paste(path_data, "Processed/export/R_plots/General", sep = "")
path_data = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/" # Path data NICOLAS-PC
path_plots = paste(path_data, "Processed/export/R_plots/General", sep = "")
ggsave(LU_df, filename = paste(path_plots, "/LU_raster.png"),
width = 2.94, height = 5.19, units = "in")
ggsave(LU_raster, filename = paste(path_plots, "/LU_raster.png"),
width = 2.94, height = 5.19, units = "in")
