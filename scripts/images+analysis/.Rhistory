# Find max and min for Difference Rasters
df_diff = df[,c("diff_METRIC", "diff_WASIM")]
diff_limits = c(min(df_diff, na.rm = TRUE), max(df_diff, na.rm = TRUE))
########################################
# SEBAL
SEBAL_raster <- ggplot(df, aes(x = x, y = y, fill = SEBAL)) +
geom_raster() +
scale_fill_viridis(option = "turbo", na.value = "transparent", direction = -1, limits = c(0, max_val)) +  # Inverse color fill gradient
theme_bw() +
coord_equal() +
labs(title = paste("SEBAL", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(SEBAL_raster, filename = paste(path_plots, "/SEBAL_raster.png"),
width = 2.94, height = 5.19, units = "in")
########################################
# METRIC
METRIC_raster <- ggplot(df, aes(x = x, y = y, fill = METRIC)) +
geom_raster() +
scale_fill_viridis(option="turbo", na.value = "transparent", direction = -1, limits = c(0, max_val)) +  # Inverse color fill gradient
theme_bw() +
coord_equal() +
labs(title = paste("METRIC", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(METRIC_raster, filename = paste(path_plots, "/METRIC_raster.png"),
width = 2.94, height = 5.19, units = "in")
METRIC_diff <- ggplot(df, aes(x = x, y = y, fill = diff_METRIC)) +
geom_raster() +
scale_fill_scico(palette = "vik", na.value = "transparent", midpoint = 0, limits = c(diff_limits[1], diff_limits[2])) +
theme_bw() +
coord_equal() +
labs(title = paste("Difference SEBAL-METRIC", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(METRIC_diff, filename = paste(path_plots, "/METRIC_diff.png"),
width = 2.94, height = 5.19, units = "in")
########################################
# WASIM
WASIM_raster <- ggplot(df, aes(x = x, y = y, fill = WASIM)) +
geom_raster() +
scale_fill_viridis(option="turbo", na.value = "transparent", direction = -1, limits = c(0, max_val)) +  # Inverse color fill gradient
theme_bw() +
coord_equal() +
labs(title = paste("WASIM", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(WASIM_raster, filename = paste(path_plots, "/WASIM_raster.png"),
width = 2.94, height = 5.19, units = "in")
WASIM_diff <- ggplot(df, aes(x = x, y = y, fill = diff_WASIM)) +
geom_raster() +
scale_fill_scico(palette = "vik", na.value = "transparent", midpoint = 0, limits = c(diff_limits[1], diff_limits[2])) +
theme_bw() +
coord_equal() +
labs(title = paste("Difference SEBAL-WASIM", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(WASIM_diff, filename = paste(path_plots, "/WASIM_diff.png"),
width = 2.94, height = 5.19, units = "in")
METRIC_diff <- ggplot(df, aes(x = x, y = y, fill = diff_METRIC)) +
geom_raster() +
scale_fill_scico(palette = "vik", na.value = "transparent", midpoint = 0, limits = c(diff_limits[1], diff_limits[2])) +
theme_bw() +
coord_equal() +
labs(title = paste("SEBAL-METRIC", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(METRIC_diff, filename = paste(path_plots, "/METRIC_diff.png"),
width = 2.94, height = 5.19, units = "in")
WASIM_diff <- ggplot(df, aes(x = x, y = y, fill = diff_WASIM)) +
geom_raster() +
scale_fill_scico(palette = "vik", na.value = "transparent", midpoint = 0, limits = c(diff_limits[1], diff_limits[2])) +
theme_bw() +
coord_equal() +
labs(title = paste("SEBAL-WASIM", date_met),
fill = "ETa (mm)") +
theme(plot.title = element_text(hjust = 0.5),  # Center the title
plot.margin = unit(c(0, 0, 0, 0), "cm"),  # Remove space around the figure / Oben, Rechts, unten, Links
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
legend.position = c(0.1, 0.1),
legend.justification = c("left", "bottom"),
legend.margin = margin(2, 2, 2, 2))  # Remove axis Label
ggsave(WASIM_diff, filename = paste(path_plots, "/WASIM_diff.png"),
width = 2.94, height = 5.19, units = "in")
library(tidyverse)
library(raster)
library(rgdal)
library(lubridate)
library(viridis)
library(sf)
library(scico)
library(gridExtra)
# Load LandUse Map
LU_path = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster.tif"
LU = raster(LU_path)
# LandUse Classes
LU_agri = c(211, 212, 221, 222, 223, 241, 242, 243, 244)
LU_bare = c(331, 332, 333, 334, 131)
LU_grass = c(231, 321, 322, 323, 324, 411, 412)
LU_urban = c(111, 112, 121, 122, 123, 124, 132, 133, 141, 142)
LU_forest = c(311, 312, 313)
LU_water = c(511, 512, 335)
# Replace Values
LU_copy = LU_df
# Replace Values
for (i in LU_agri){
LU_copy[LU_copy == i] <- 1
}
LU_copy = LU
# Replace Values
for (i in LU_agri){
LU_copy[LU_copy == i] <- 1
}
# BARE = 2
for (i in LU_bare){
LU_copy[LU_copy == i] <- 2
}
# GRASS = 3
for (i in LU_grass){
LU_copy[LU_copy == i] <- 3
}
# URBAN = 4
for (i in LU_urban){
LU_copy[LU_copy == i] <- 4
}
# FOREST = 5
for (i in LU_forest){
LU_copy[LU_copy == i] <- 5
}
# WATER = 6
for (i in LU_water){
LU_copy[LU_copy == i] <- 6
}
plot(LU_copy)
hist(LU_copy)
# Export as csv Dataframe
LU_df <- as.data.frame(LU_copy, xy = TRUE)
names(LU_df)[3] <- "values"
path_LU_export = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster_combined.csv"
write.csv(LU_df, file = path_LU_export, row.names=FALSE)
# Export as Tiff
path_LU_export_tif = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster_combined.tif"
write.csv(LU_copy, file = path_LU_export_tif, format="GTiff", overwrite = TRUE)
write.csv(LU_copy, file = path_LU_export_tif, format="GTiff")
write.csv(LU_copy, file = path_LU_export_tif)
plot(LU_copy)
writeRaster(LU_copy, file = path_LU_export_tif, format="GTiff", overwrite = TRUE)
library(tidyverse)
library(raster)
library(rgdal)
library(lubridate)
library(viridis)
library(sf)
library(scico)
library(gridExtra)
### DATES
date_list = c("2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-03-27",
"2020-09-19")
### LOAD DATA
path_data = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/" # Path data NICOLAS-PC
#path_combined_data = paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
#path_combined_data = paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
path_LU = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster_combined.csv"
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
# Read CSV file into a data frame
df_name <- str_remove(str_extract(path_combined_data, "combined_.*?\\.csv"), ".csv")
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
data_frames_list <- list()
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
# Read CSV file into a data frame
df_name <- str_remove(str_extract(path_combined_data, "combined_.*?\\.csv"), ".csv")
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
data_frames_list <- list()
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- date_str
# Read CSV file into a data frame
df_name <- str_remove(str_extract(path_combined_data, "combined_.*?\\.csv"), ".csv")
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
date_list = c("2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-03-27",
"2020-09-19")
### LOAD DATA
path_data = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/" # Path data NICOLAS-PC
#path_combined_data = paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
path_LU = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster_combined.csv"
data_frames_list <- list()
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- date_str
# Read CSV file into a data frame
df_name <- str_remove(str_extract(path_combined_data, "combined_.*?\\.csv"), ".csv")
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
library(tidyverse)
library(raster)
library(rgdal)
library(lubridate)
library(viridis)
library(sf)
library(scico)
library(gridExtra)
### DATES
date_list = c("2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-03-27",
"2020-09-19")
### LOAD DATA
path_data = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/" # Path data NICOLAS-PC
#path_combined_data = paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
path_LU = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster_combined.csv"
data_frames_list <- list()
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- date_str
# Read CSV file into a data frame
df_name <- str_remove(str_extract(path_combined_data, "combined_.*?\\.csv"), ".csv")
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
library(tidyverse)
library(raster)
library(rgdal)
library(lubridate)
library(viridis)
library(sf)
library(scico)
library(gridExtra)
date_list = c("2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-03-27",
"2020-09-19")
### LOAD DATA
path_data = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/" # Path data NICOLAS-PC
#path_combined_data = paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
path_LU = "D:/Nicolas_D/Geodaten/Masterarbeit/DATA_MesoHyd_MA-SEBAL/Processed/study_area/LU_raster_combined.csv"
data_frames_list <- list()
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- date_str
# Read CSV file into a data frame
df_name <- str_remove(str_extract(path_combined_data, "combined_.*?\\.csv"), ".csv")
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
# Read CSV file into a data frame
df_name <- date_str
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
setwd("C:/Arbeitsdateien/master_project/scripts/images+analysis")
"2015-04-15"
2015-04-15
View(`2016-09-24`)
`2015-04-15`$SEBAL
View(`2016-09-24`)
SEBAL_ts = data.frame()
SSEB_ts = data.frame()
METRIC_ts = data.frame()
WASIM_ts = data.frame()
SEBAL_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
SSEB_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
METRIC_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
WASIM_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
METRIC_ts
for (i in data_frames_list) {
SEBAL_ts$i <- i$SEBAL
SSEB_ts$i <- i$SSEB
METRIC_ts$i <- i$METRIC
WASIM_ts$i <- i$WASIM
}
SEBAL_ts
data_frame
data_frames_list
data_frames_list$`2015-04-15`
SEBAL_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
SSEB_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
METRIC_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
WASIM_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
for (i in data_frames_list) {
# Append columns to respective data frames
SEBAL_ts <- cbind(SEBAL_ts, i$SEBAL)
SSEB_ts <- cbind(SSEB_ts, i$SSEB)
METRIC_ts <- cbind(METRIC_ts, i$METRIC)
WASIM_ts <- cbind(WASIM_ts, i$WASIM)
}
date_list = c("2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-09-19")
data_frames_list <- list()
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
# Read CSV file into a data frame
df_name <-
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
# Read CSV file into a data frame
df_name <- date_SSEB
for (date_str in date_list) {
# Convert date string to Date object
date <- as.Date(date_str, format = "%Y-%m-%d")
# Convert date to the desired formats
date_SSEB <- format(date, "%Y_%m_%d") %>%
str_replace_all("-", "_")
# Create file path
path_combined_data <- paste(path_data, "Processed/export/combined_data/combined_", date_SSEB, ".csv", sep = "")
# Read CSV file into a data frame
df_name <- date_SSEB
assign(df_name, read.csv(path_combined_data))
# Store the data frame in the list
data_frames_list[[df_name]] <- get(df_name)
}
SEBAL_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
SSEB_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
METRIC_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
WASIM_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
for (i in data_frames_list) {
# Append columns to respective data frames
SEBAL_ts <- cbind(SEBAL_ts, i$SEBAL)
SSEB_ts <- cbind(SSEB_ts, i$SSEB)
METRIC_ts <- cbind(METRIC_ts, i$METRIC)
WASIM_ts <- cbind(WASIM_ts, i$WASIM)
}
SEBAL_ts
SEBAL_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
SSEB_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
METRIC_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
WASIM_ts = data.frame(x = `2015-04-15`$x, y = `2015-04-15`$y)
# Loop through data_frames_list
for (i in names(data_frames_list)) {
# Append columns to respective data frames with dynamic column names
SEBAL_ts <- cbind(SEBAL_ts, setNames(data_frames_list[[i]]$SEBAL, i))
SSEB_ts <- cbind(SSEB_ts, setNames(data_frames_list[[i]]$SSEB, i))
METRIC_ts <- cbind(METRIC_ts, setNames(data_frames_list[[i]]$METRIC, i))
WASIM_ts <- cbind(WASIM_ts, setNames(data_frames_list[[i]]$WASIM, i))
}
SEBAL_ts
View(SEBAL_ts)
View(SEBAL_ts)
columns = c("x", "y",
"2015-04-15",
"2015-07-04",
"2016-09-08",
"2016-09-24",
"2017-04-20",
"2018-04-07",
"2018-09-30",
"2019-06-29",
"2020-09-19")
colnames(SEBAL_ts) <- columns
View(SEBAL_ts)
colnames(SSEB_ts) <- columns
colnames(METRIC_ts) <- columns
colnames(WASIM_ts) <- columns
means <- colMeans(SEBAL_ts, na.rm = TRUE)
means
SEBAL_ts[0,1]
SEBAL_ts[0,]
SEBAL_ts[0,2]
SEBAL_ts[0,2:11]
SEBAL_ts[,2:11]
SEBAL_ts[,3:11]
means <- colMeans(SEBAL_ts[,3:11], na.rm = TRUE)
means
means <- colMeans(SEBAL_ts[,3:11], na.rm = TRUE)
means
time_series <- ts(means, start = c(2015, 4), frequency = 12)
lot(time_series, type = "l", xlab = "Time", ylab = "Mean Value",
main = "Time Series of Column Means")
plot(time_series, type = "l", xlab = "Time", ylab = "Mean Value",
main = "Time Series of Column Means")
